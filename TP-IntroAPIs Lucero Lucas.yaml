openapi: 3.0.0
info:
  description: |
    API de la Heladería Via Apilia. A través de esta API se pueden consultar
    los gustos de helado y realizar pedidos.
  version: "1.0.0"
  title: Heladería Via Apilia
  contact:
    email: devs@heladeria-apilia.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/LUCASELUCERO/EntregaAPI/1.0.0
  - url: 'https://api.heladeria-apilia.com'
paths:
  /repartidores:
    post:
      description: Agregar un nuevo repartidor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NuevoRepartidor"
      
      responses:
          '201':
            description: El repartidor ha sido creado/agregado
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Repartidor'
          '400':
          description: Error de validación al intentar crear el repartidor
      
    get:
      description: Listar los repartidores
      # Para poder filtrar por edad
      parameters:
        - $ref: "#/components/parameters/edadRepartidor"
          
      responses:
        '200':
          description: Estos son los repartidores del sistema
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repartidor'
        '400':
          description: La edad ingresada no es válida
      
  /repartidores/{repartidorId}:
    get:
      description: Consultar datos de un repartidor en particular
      parameters:
      - $ref: '#/components/parameters/repartidorId'
      responses:
        '200':
          description: El repartidor buscado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repartidor'
        '404':
          description: No se conoce un repartidor con tal id
      
    put:
      description: Cambiar los datos de un repartidor en particular
      parameters:
      - $ref: '#/components/parameters/repartidorId'
      requestBody:
        content:
          application/json:
            schema:
              # Uso el schema 'NuevoRepartidor', y no el schema 'Repartidor', porque no quiero permitir que se pueda modificar el id
              $ref: "#/components/schemas/NuevoRepartidor"
      responses:
        '200':
          description: Los datos del repartidor fueron modificados exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repartidor'
        '400':
          description: El id de repartidor ingresado es inválido
        '404':
          description: No se conoce un repartidor con tal id
      
    delete:
      description: Borrar repartidor del sistema
      parameters:
      - $ref: '#/components/parameters/repartidorId'
      responses:
        '204':
          description: El repartidor fue borrado del sistema
        '404':
          description: No se conoce un repartidor con tal id
    
  /repartidores/{repartidorId}/vehiculos:
    post:
      description: Agregar un nuevo vehículo a un repartidor en particular
      parameters:
      - $ref: '#/components/parameters/repartidorId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NuevoVehiculo'
      responses:
        '201':
          description: Se ha agregado el nuevo vehículo al repartidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehiculo"
	'400':
          description: El id de repartidor ingresado es inválido
        '404':
          description: No se conoce un repartidor con tal id
      
    get:
      description: Listar los vehículos de un repartidor en particular
      parameters:
        - $ref: "#/components/parameters/repartidorId"
      responses:
        '200':
          description: Estos son los vehículos del repartidor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vehiculo"
        '404':
          description: No se conoce un repartidor con tal id

  /repartidores/{repartidorId}/vehiculos/{vehiculoId}:
    put:
      description: Cambiar los datos de un vehículo de un repartidor en particular
      parameters:
      - $ref: '#/components/parameters/repartidorId'
      - $ref: '#/components/parameters/vehiculoId'
      requestBody:
        content:
          application/json:
            schema:
              # Uso el schema 'NuevoVehiculo', y no el schema 'Vehiculo', porque no quiero permitir que se pueda modificar el id
              $ref: "#/components/schemas/NuevoVehiculo"
      responses:
        '200':
          description: Los datos del vehículo del repartidos fueron modificados exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehiculo'
        '400':
          description: El vehículo ingresado y/o su repartidor no son válidos
        '404':
          description: No se conoce un repartidor y/o vehículo con tal id

  /gustos:
    get:
      description: Listar los gustos de helado
      parameters:
      - in: query
        name: tipo
        required: false
        schema:
          $ref: '#/components/schemas/TipoDeGusto'
      responses:
        '200':
          description: Estos son los gustos de helado
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gusto'
  /gustos/{gustoId}:
    get:
      description: Ver un gusto particular
      parameters:
      - $ref: '#/components/parameters/gustoId'
      responses:
        '200':
          description: El gusto seleccionado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gusto'
        '404':
          description: No se conoce un gusto con tal id
  /pedidos:
    post:
      description: Crear un nuevo pedido a la dirección indicada
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                direccion_entrega:
                  type: string
                  description: dirección en la que se ha de entregar este pedido
              required: [direccion_entrega]
      responses:
        '201':
          description: El pedido ha sido creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
  /pedidos/{pedidoId}:
    get:
      description: Ver un pedido particular
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      responses:
        '200':
          description: El pedido ha sido hallado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        '404':
          description: No se conoce un pedido con tal id
    put:
      description: Cambiar los datos de un pedido particular
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                direccion_entrega:
                  type: string
                  description: dirección en la que se ha de entregar este pedido
              required: [direccion_entrega]
      responses:
        '200':
          description: El pedido ha sido actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        '404':
          description: No se conoce un pedido con tal id
  /pedidos/{pedidoId}/potes:
    get:
      description: Lista los potes que componen un pedido
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      responses:
        '200':
          description: Los potes del pedido
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Pote'
        '404':
          description: No se conoce un pedido con tal id
    post:
      description: Agrega un pote a un pedido
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                peso:
                  $ref: '#/components/schemas/PesoDePote'
                gustos:
                  type: array
                  items:
                    type: string
                  description: los gustos de helado en este pote
                  example: [ddl, pist]
              required: [peso, gustos]
      responses:
        '201':
          description: El pote fue agregado al pedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pote'
        '404':
          description: No se conoce un pedido con tal id
  /pedidos/{pedidoId}/potes/{poteId}:
    delete:
      description: quitar un pote de un pedido
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      - $ref: '#/components/parameters/poteId'
      responses:
        '204':
          description: El pote fue quitado del pedido
        '404':
          description: No se conoce un pedido y/o pote con tal id
  /pedidos/{pedidoId}/pagar:
    post:
      description: Inicia el pago del pedido
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatosDePago'
      responses:
        '202':
          description: Los datos de pago han sido recibidos y serán procesados
        '404':
          description: No se conoce un pedido con tal id
          
  /pedidos/{pedidoId}/repartidor:
    put:
      description: Cambiar el repartidor asignado a un pedido
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repartidor'
      responses:
        '200': 
          description: Se actualizó el repartidor del pedido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pedido"
	'400': 
          description: El repartidor que intentó asignar al pedido no existe
        '404':
          description: No se conoce un pedido con tal id 
     
    delete:
      description: Borrar la asignación de un repartidor a un pedido
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      responses:
        '204':
          description: Se eliminó la asignación del repartidor al pedido
          
        '400': 
          description: El pedido no tenía un repartidor asociado
          
        '404':
          description: No se conoce un pedido con tal id 
          
  /pedidos/{pedidoId}/pago:
    get:
      description: Ver el estado del pago de un pedido particular
      parameters:
      - $ref: '#/components/parameters/pedidoId'
      responses:
        '200':
          description: Este es el estado del pago del pedido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pago'
        '404':
          description: No se conoce un pedido con tal id

components:
  parameters:
    repartidorId:
      name: repartidorId
      in: path
      description: Id (numérico) del repartidor
      required: true
      example: 1
      schema:
        type: integer  
        
    edadRepartidor:
      in: query
      name: edad
      required: false
      schema:
        description: Edad del repartidor opcional para filtrar
        type: integer
        example: 24
        
    vehiculoId:
      name: vehiculoId
      in: path
      description: Id (numérico) del vehículo de un repartidor
      required: true
      example: 77
      schema:
        type: integer
        
    gustoId:
      name: gustoId
      in: path
      description: id del gusto
      required: true
      schema:
        type: string
    pedidoId:
      name: pedidoId
      in: path
      description: id del pedido
      required: true
      schema:
        type: integer
    poteId:
      name: poteId
      in: path
      description: id del pote
      required: true
      schema:
        type: integer
        
    
      
  schemas:
    # Uso un schema distinto para un repartidor a agregar, porque no tiene los mismos atributos que un Repartidor ya existente, en particular, no tiene 'id'. Además, hay que exigir que los atributos que lo conforman (nombre, apellido, CUIL y edad) sean obligatorios, y no opcionales
    NuevoRepartidor:
      description: Datos para agregar a un nuevo repartidor de pedidos
      type: object
      properties:
        nombre:
          type: string
          description: Nombre del repartidor
          example: Juan
          
        apellido:
          type: string
          description: Apellido del repartidor
          example: Bustos
          
        CUIL:
          type: string
          description: CUIL del repartidor 
          minLength: 13
          maxLength: 13
          example: 27-28033514-8
          
        edad:
          type: integer
          description: Edad de un repartidor
          example: 24
      required: [nombre, apellido, CUIL, edad]
  
  
    Repartidor: #G mucho copy paste con respecto a NuevoRepartidor
      description: Un repartidor de pedidos
      type: object
      properties:
        id:
          type: integer
          description: Identificador numérico del repartidor
          example: 1
          
        nombre:
          type: string
          description: Nombre del repartidor
          example: Juan
          
        apellido:
          type: string
          description: Apellido del repartidor
          example: Bustos
          
        CUIL:
          type: string
          description: CUIL del repartidor 
          minLength: 13
          maxLength: 13
          example: 27-28033514-8
          
        edad:
          type: integer
          description: Edad de un repartidor
          example: 24
          
        _links:
          type: object
          description: hypermedia links de un repartidor
          properties:
            pedidos:
              type: array
              items:
                $ref: "#/components/schemas/Link"
            vehiculos:
              $ref: "#/components/schemas/Link"
            borrar_repartidor: 
              $ref: "#/components/schemas/Link"
       
    NuevoVehiculo:
      description: Abstracción del vehículo que posee un repartidor (no es el vehículo en si)
      type: object
      # Para la herencia
      discriminator:
        propertyName: tipoDeVehiculo
      properties:
        tipoDeVehiculo:
          type: string
          description: Es el tipo de vehículo que puede tener un repartidor
          enum:
            - Auto
            - Bicicleta
            - Moto
          example: Moto
      required: [tipoDeVehiculo]
          
    Vehiculo:
      description: Abstracción del vehículo que posee un repartidor (no es el vehículo en si)
      type: object
      # Para la herencia
      discriminator:
        propertyName: tipoDeVehiculo
      properties:
        id: 
          type: integer
          description: Identificador numérico del vehículo de un repartidor
          example: 60
        tipoDeVehiculo:
          type: string
          description: Es el tipo de vehículo que puede tener un repartidor
          enum:
            - Auto
            - Bicicleta
            - Moto
          example: Moto
          
        _links:
          type: object 
          description: hypermedia links de un vehiculo
          properties:
            repartidor:
              $ref: "#/components/schemas/Link"
            borrar_vehiculo: 
              $ref: "#/components/schemas/Link"
  
    Auto:
      description: Un auto (con patente), que es uno de los posibles vehículos que puede tener un repartidor 
      # Hereda las propiedades del schema 'Vehiculo'
      allOf:
      - $ref: '#/components/schemas/Vehiculo'
      - type: object
        properties:
          patente:
            type: string
            description: Patente del auto
            example: ERT 703
        required: [patente]
    
    Bicicleta:
      description: Una bicicleta (con rodado), que es uno de los posibles vehículos que puede tener un repartidor
      # Hereda las propiedades del schema 'Vehiculo'
      allOf:
      - $ref: '#/components/schemas/Vehiculo'
      - type: object
        properties:
          rodado:
            type: string
            description: Rodado de la bicicleta
            example: rodado 26
        required: [rodado]
    
    Moto:
      description: Una moto (con patente), que es uno de los posibles vehículos que puede tener un repartidor
      # Hereda las propiedades del schema 'Vehiculo'
      allOf:
      - $ref: '#/components/schemas/Vehiculo'
      - type: object
        properties:
          patente:
            type: string
            description: Patente de la moto
            example: AJK 121
        required: [patente]
    
  
    TipoDeGusto:
      description: categoría de gustos de helado
      type: string
      enum:
        - chocolates
        - dulce de leches
        - cremas
        - frutas
      example: dulce de leches
    Gusto:
      description: un gusto de helado
      type: object
      properties:
        id:
          type: string
          description: nombre corto que identifica este gusto
          example: ddl
        nombre:
          type: string
          description: nombre legible por humanos para este gusto
          example: Dulce de leche
        tipo:
          $ref: '#/components/schemas/TipoDeGusto'
      required: [id, nombre, tipo]
    Pedido:
      description: un pedido de helados
      type: object
      properties:
        id:
          type: integer
          description: identificador de este pedido
          example: 22
        direccion_entrega:
          type: string
          description: dirección en la que se ha de entregar este pedido
          example: Lavalleja 244 4C, CABA
        _links:
          type: object
          description: hypermedia links de un pedido
          properties:
            potes: 
              $ref: '#/components/schemas/Link'
            pagar: 
              $ref: '#/components/schemas/Link'
            pago: 
              $ref: '#/components/schemas/Link'
            asignar_repartidor:
              $ref: '#/components/schemas/Link'
            obtener_repartidor:
              $ref: '#/components/schemas/Link'
            modificar_repartidor:
              $ref: '#/components/schemas/Link'
            borrar_repartidor:
              $ref: '#/components/schemas/Link'
            
      required: [id, direccion_entrega]
    PesoDePote:
      description: peso de un pote de helado en gramos
      type: string
      enum:
        - "1000"
        - "500"
        - "250"
      example: "500"
    Pote:
      description: un pote de helado dentro de un pedido
      type: object
      properties:
        id:
          type: integer
          description: identificador de este pote dentro del pedido
          example: 1
        peso:
          $ref: '#/components/schemas/PesoDePote'
        gustos:
          type: array
          items:
            type: object
            properties:
              id: 
                type: string
                description: el id del gusto de helado en este pote
                example: ddl
              _links:
                type: object
                description: hypermedia links de un gusto dentro de un pote
                properties:
                  self:
                    $ref: '#/components/schemas/Link'
          description: los gustos de helado en este pote
        _links:
          type: object
          description: hypermedia links de un pote
          properties:
            pedido:
              $ref: '#/components/schemas/Link'
            borrar: 
              $ref: '#/components/schemas/Link'
      required: [id, peso, gustos]
    DatosDePago:
      description: los datos necesarios para iniciar el pago de un pedido
      type: object
      discriminator:
        propertyName: tipoDePago
      properties:
        tipoDePago:
          type: string
          description: se usa para determinar el tipo de pago a usar
      required: [tipoDePago]
    DatosDePagoBilleteraVirtual:
      description: datos de pago cuando se usa una billetera virtual
      allOf:
      - $ref: '#/components/schemas/DatosDePago'
      - type: object
        properties:
          alias:
            type: string
            description: nombre de usuario o alias de la billetera a utilizar
            example: mi.cuenta.billetera
        required: [alias]
    DatosDePagoTarjeta:
      description: datos de pago cuando se usa tarjeta de crédito
      allOf:
      - $ref: '#/components/schemas/DatosDePago'
      - type: object
        properties:
          numerosTarjeta:
            type: string
            description: los 15 o 16 números de la tarjeta de crédito
            example: "1234567812345678"
          vencimientoTarjetaMes:
            type: number
            format: int8
            minimum: 1
            maximum: 6
            description: el mes del vencimiento de la tarjeta de crédito
            example: 4
          vencimientoTarjetaAnio:
            type: number
            format: int8
            minimum: 0
            maximum: 99
            description: el año de vencimiento de la tarjeta expresado en dos dígitos
            example: 24
        required: [numerosTarjeta, vencimientoTarjetaMes, vencimientoTarjetaAnio]
    Pago:
      description: estado del pago de un pedido
      type: object
      properties:
        status:
          type: string
          enum:
            - pendiente de pago
            - pago en proceso
            - pago aceptado
            - pago fallado
          example: pago aceptado
      required: [status]
    Link:
      description: un link usado para hypermedia
      type: object
      properties:
        href:
          type: string
          format: uri
          description: la URI del link
          example: "http://foo.com/bar"
        verb:
          type: string
          enum:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          example: GET
          description: el verbo a usar en el link